JSON-->JAVASCRIPT OBJECT NOTATION
==>It is light weight format that is used to store and exchange data.
==>it represents structured data based on javascript object syntax that means javascript program can be converted  into json data and json data into javascript object
==>JSON format is often used for serializing and transmitting structured data over a network conection.
==>It is used primarily to transmit data between a server and web application,serving as an alternative to XML.
==>JSON is javascript object notation.The JSON syntax is derived from JavaScript object notation, but the JSON format is text(string) only.
==> JSON is a lightweight data-interchange format
==>    JSON is language independent format that uses human readable text to transmit data objects.
==>consists of objects of name-value pairs.
==>file have extension as .json
==>The JSON format was originally specified by Douglas Crockford.
==>supported by most of backend technologies.

Why Use JSON?

==>The JSON format is syntactically similar to the code for creating JavaScript objects. Because of this, a JavaScript program can easily convert JSON data into JavaScript objects.
==>Since the format is text only, JSON data can easily be sent between computers, and used by any programming language.

JavaScript has a built in function for converting JSON strings into JavaScript objects:
JSON.parse()

JavaScript also has a built in function for converting an object into a JSON string:
JSON.stringify()
==============================================================
JSON syntax:

==>JSON uses names/value pairs to store data
==>commas are used to seperate multiple data values.
==>objects are enclosed within curly braces
==>square brackets are used to store arrays.
==>JSON keys must be enclosed within "" quotes.
syntax:
{
	"name":"rahul",
	"lname":"khanna",
	"contact":1234567
}
===============================================================

JSON Values

In JSON, values must be one of the following data types:
    a string
    a number
    an object
    an array
    a boolean
    null

json values cannot be one of the following datatypes
1)function
2)date
3)undefined

JSON_REF = '{
	"name":"John", 
	"age":30, 
	"cars":["Ford", "BMW", "Fiat"]
	
}';



========================================================
Why JSON is Better Than XML

==>XML is much more difficult to parse than JSON.
==>JSON is parsed into a ready-to-use JavaScript object.
==>For AJAX applications, JSON is faster and easier than XML:

Using XML

    Fetch an XML document
    Use the XML DOM to loop through the document
    Extract values and store in variables

Using JSON
    Fetch a JSON string
    JSON.Parse the JSON string
=============================================================

The JSON.parse() static method parses a JSON string, constructing the JavaScript value or object described by the string.
When receiving data from a web server, the data is always a string.
Parse the data with JSON.parse(), and the data becomes a JavaScript object.

we received this text from a web server:
myjson='{"name":"John", "age":30, "car":null}' ;
'{"name":"John", "age":30, "car":null}'

Use the JavaScript function JSON.parse() to convert text into a JavaScript object:
JSON.parse(myjson)
Object { name: "John", age: 30, car: null }
============================================================
difference between xml and json

1)xml needs an xml parser, whereas javascript method can be used to parse  json Object
2)json is less decorative and more data compared to xml
3)it is easy to read and write 
4)json can be used with arrays

<students>
	<student>
		<fname>jenny</fname>
		<lname>watson</lname>
	</student>
	<student>
		<fname>rahul</fname>
		<lname>kumar</lname>
	</student>
</students>


{
"students":[

		{"fname":"jenny","lname":"watson"},
		{"fname":"jenny","lname":"watson"}
		    ]
}
===========================================================
Reading data from json

==>To read data from a json object, you can use the JSON.parse() provided by javascript.

syntax:
var obj=JSON.parse(text);


==========================================================
<!DOCTYPE html>
<html>
<body>

<h2>Creating an Object from a JSON String</h2>

<p id="demo"></p>

<script>
const txt = '{"name":"John", "age":30, "city":"New York"}'
const obj = JSON.parse(txt);
document.getElementById("demo").innerHTML = obj.name + ", " + obj.age + " , "+obj.city;
</script>

</body>
</html>

=========================================================
<!DOCTYPE html>
<html>
<body>

<h2>Parsing a JSON Array.</h2>
<p>Data written as an JSON array will be parsed into a JavaScript array.</p>
<p id="demo"></p>

<script>
const text = '[ "Ford", "BMW", "Audi", "Fiat" ]';
const myArr = JSON.parse(text);
document.getElementById("demo").innerHTML = myArr[0];
for(var v in myArr)
{
    document.write(myArr[v]);
}
</script>

</body>
</html>

===================================================
<!DOCTYPE html>
<html>
<body>

<h2>Parsing a JSON Array.</h2>
<p>Data written as an JSON array will be parsed into a JavaScript array.</p>
<p id="demo"></p>

<script>
myjson=`{
    "name":"raj",
    "mobile":98876578,
    "course":["c","c++","java"],
    "address":{"area":"baner"}
}`;

const myArr = JSON.parse(myjson);
    document.write(myArr.name + " "+myArr.mobile + " " + myArr.course+ " "+ myArr.address.area);

</script>

</body>
</html>
========================================================
Parsing Dates

Date objects are not allowed in JSON.
If you need to include a date, write it as a string.

========================================================
JSON.parse(myjson2=`{
  "course":["c","c++","java"],
"address":{"area":"baner","pin":4455007},
"married":false,
"dom":null
}`
)
Object { course: (3) […], address: {…}, married: false, dom: null }
============================================================================
JSON.parse(my = `{"name":"John", "age":30, "cars":["Ford", "BMW", "Fiat"]}`
);

-==================================================================
JSON.parse(myjson=`{
    "name":"raj",
    "mobile":98876578,
    "course":["c","c++","java"],
    "address":{"area":"baner"},
   "date":"april 4 1965"
}`
)

===============================================
ARRAY OF OBJECTS
JSON.parse(employees=`[    
        {"name":"Ram", "email":"ram@gmail.com", "age":23},    
        {"name":"Shyam", "email":"shyam23@gmail.com", "age":28},  
        {"name":"John", "email":"john@gmail.com", "age":33},    
        {"name":"Bob", "email":"bob32@gmail.com", "age":41}   
    ]` );


==================================================================
JSON.stringify()

When sending data to a web server, the data has to be a string.
Convert a JavaScript object into a string with JSON.stringify().

Imagine we have this object in JavaScript:
const obj = {name: "John", age: 30, city: "New York"};

Use the JavaScript function JSON.stringify() to convert it into a string.
const myJSON = JSON.stringify(obj);

The result will be a string following the JSON notation.
myJSON is now a string, and ready to be sent to a server:


<!DOCTYPE html>
<html>
<body>

<h2>Create a JSON string from a JavaScript object.</h2>
<p id="demo"></p>

<script>
const obj = {name: "John", age: 30, city: "New York"};
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
</script>

</body>
</html>


===================================================

==========================================================
Stringify Dates

In JSON, date objects are not allowed. The JSON.stringify() function will convert any javascript dates into strings.
<!DOCTYPE html>
<html>
<body>

<h2>JSON.stringify() converts date objects into strings.</h2>
<p id="demo"></p>

<script>
const obj = {name: "John", today: new Date(), city: "New York"};
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
</script>

</body>
</html>
=============================================================

note:
It is a common mistake to call a JSON object literal "a JSON object".
JSON cannot be an object. JSON is a string format but When it is converted to a JavaScript variable, it becomes a JavaScript object.


==================================================
Looping an Object

<!DOCTYPE html>
<html>
<body>

<h2>Looping Object Properties</h2>
<p id="demo"></p>

<script>
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);

let text = "";
for (const x in myObj) {
  text += x + ", "+ myObj[x];
  document.getElementById("demo").innerHTML = text;
}

</script>

</body>
</html>
====================================================
=========================================================
JSON Array Literals

myArray = ["Ford", "BMW", "Fiat"];//javascript object

You can create a JavaScript array by parsing a JSON string:
Example
myJSON = '["Ford", "BMW", "Fiat"]';
myArray = JSON.parse(myJSON);

<!DOCTYPE html>
<html>
<body>

<h2>Creating an Array from JSON</h2>
<p id="demo"></p>

<script>
const myJSON = '["Ford", "BMW", "Fiat"]';
const myArray = JSON.parse(myJSON);
for(var x in myArray){
document.getElementById("demo").innerHTML = myArray;
document.write(myArray[x]);
}
</script>

</body>
</html>


=========================================================
Accessing Array Values
<!DOCTYPE html>
<html>
<body>

<h1>Access an Array by Index</h1>
<p id="demo"></p>

<script>
const myJSON = '["Ford", "BMW", "Fiat"]';
const myArray = JSON.parse(myJSON);
document.getElementById("demo").innerHTML = myArray[0];
</script>

</body>
</html>
==============================================
looping Arrays in Objects

<!DOCTYPE html>
<html>
<body>

<h2>Looping an Array</h2>
<p id="demo"></p>

<script>
const myJSON = '{"name":"John", "age":30, "cars":["Ford", "BMW", "Fiat"]}';
const myObj = JSON.parse(myJSON);

let text = "";
for (let i in myObj.cars) {
  text += myObj.cars[i] + ", ";
}

document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>

===============================================


